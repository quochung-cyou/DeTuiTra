rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if the user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to check if the user is accessing their own data
    function isCurrentUser(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // Helper function to check if a user is a member of a fund
    function isFundMember(fundId) {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/funds/$(fundId)) &&
        request.auth.uid in get(/databases/$(database)/documents/funds/$(fundId)).data.members;
    }
    
    // Helper function to check if a user is the creator of a fund
    function isFundCreator(fundId) {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/funds/$(fundId)) &&
        request.auth.uid == get(/databases/$(database)/documents/funds/$(fundId)).data.createdBy;
    }
    
    // Users collection rules
    match /users/{userId} {
      // Allow any authenticated user to read any user document
      // This is needed for displaying member info in funds
      allow read: if isAuthenticated();
      
      // Allow creation of a user document only for the authenticated user
      allow create: if isCurrentUser(userId);
      
      // Allow updates to a user document only for the authenticated user
      allow update: if isCurrentUser(userId);
      
      // Users can't delete their user documents
      allow delete: if false;
    }
    
    // Funds collection rules
    match /funds/{fundId} {
      // Any authenticated user can read funds
      // This is needed for the fund list and to check if a user is a member
      allow read: if isAuthenticated();
      
      // Any authenticated user can create a fund
      allow create: if isAuthenticated() && 
                     request.resource.data.createdBy == request.auth.uid &&
                     request.auth.uid in request.resource.data.members;
      
      // Any member can update most fund properties
      // But API keys can only be modified by the fund creator
      allow update: if isAuthenticated() && request.auth.uid in resource.data.members &&
                     // Check if API keys are being modified
                     ((!('aiApiKeys' in request.resource.data) && !('aiApiKeys' in resource.data)) || 
                      ('aiApiKeys' in request.resource.data && 'aiApiKeys' in resource.data && 
                       request.resource.data.aiApiKeys == resource.data.aiApiKeys) ||
                      // Only fund creator can modify API keys
                      isFundCreator(fundId));
      
      // Allow updating just the aiUsageStats field by any member
      // This is needed for tracking API usage
      allow update: if isAuthenticated() && 
                     request.auth.uid in resource.data.members &&
                     request.resource.data.diff(resource.data).affectedKeys().hasOnly(['aiUsageStats', 'updatedAt']);
      
      // Only the creator can delete a fund
      allow delete: if isFundCreator(fundId);
    }
    
    // Transactions collection rules
    match /transactions/{transactionId} {
      // Any authenticated user can read transactions
      // This is needed for displaying transactions in funds
      allow read: if isAuthenticated();
      
      // Any authenticated user can create transactions
      // The application logic will ensure they are a member of the fund
      allow create: if isAuthenticated();
      
      // Transaction creator can update
      allow update: if isAuthenticated() && 
                    resource.data.createdBy == request.auth.uid;
      
      // Transaction creator OR any fund member can delete
      allow delete: if isAuthenticated() && 
                    (resource.data.createdBy == request.auth.uid || 
                     isFundMember(resource.data.fundId));
    }
  
    
    // FCM Tokens collection rules
    match /fcmTokens/{userId} {
      // Allow users to read their own FCM tokens
      allow read: if isCurrentUser(userId);
      
      // Allow users to create and update their own FCM tokens
      allow create, update: if isCurrentUser(userId);
      
      // Allow any authenticated user to read FCM tokens
      // This is needed for sending notifications to fund members
      allow read: if isAuthenticated();
    }
    
    // Fund notifications collection rules
    match /fund_notifications/{fundId} {
      // Helper function to check if a user is a member of a fund or the creator
      function canAccessFund() {
        return isAuthenticated() && 
          (exists(/databases/$(database)/documents/funds/$(fundId)) && 
           (request.auth.uid in get(/databases/$(database)/documents/funds/$(fundId)).data.members || 
            request.auth.uid == get(/databases/$(database)/documents/funds/$(fundId)).data.createdBy));
      }
      
      // Allow read if user is a member of the fund or the creator
      allow read: if canAccessFund();
      
      // Allow create if user is a member of the fund or the creator
      // OR if the user is creating a transaction (special case for notifications)
      allow create, update: if isAuthenticated() && 
        (canAccessFund() || 
         (request.resource.data.keys().hasAny(['fundId']) && 
          request.resource.data.fundId == fundId));
      
      // Allow delete if user is a member of the fund or the creator
      allow delete: if canAccessFund();
      
      // Notifications subcollection rules
      match /notifications/{notificationId} {
        // Allow read if user is a member of the fund or the creator
        allow read: if canAccessFund();
        
        // Allow create if user is a member of the fund or the creator
        // OR if the user is creating a transaction (special case for notifications)
        allow create, update: if isAuthenticated() && 
          (canAccessFund() || 
           (request.resource.data.keys().hasAny(['fundId']) && 
            request.resource.data.fundId == fundId));
        
        // Allow delete if user is a member of the fund or the creator
        allow delete: if canAccessFund();
      }
    }
  }
}
