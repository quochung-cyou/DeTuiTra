// This is a placeholder service worker that will be replaced by the Workbox-generated service worker
// The actual service worker will be generated by vite-plugin-pwa during build

// Firebase messaging background handler
importScripts('https://www.gstatic.com/firebasejs/9.23.0/firebase-app-compat.js');
importScripts('https://www.gstatic.com/firebasejs/9.23.0/firebase-messaging-compat.js');

// Initialize Firebase with your config only if it's not already initialized
let messaging;
try {
  // Try to get the existing Firebase app
  messaging = firebase.messaging();
} catch (e) {
  // If it fails, initialize Firebase
  const firebaseConfig = {
    // This will be replaced by the actual config during build
    // The actual values will come from your environment variables
    messagingSenderId: self.FIREBASE_MESSAGING_SENDER_ID || '123456789012',
  };
  
  firebase.initializeApp(firebaseConfig);
  messaging = firebase.messaging();
}

// Handle background messages from FCM
messaging.onBackgroundMessage((payload) => {
  console.log('Background message received:', payload);
  
  const notificationTitle = payload.notification?.title || 'Fund Flow Notification';
  const notificationOptions = {
    body: payload.notification?.body || 'New notification from Fund Flow',
    icon: payload.notification?.icon || '/pwa-512x512.png',
    badge: '/logo.png',
    vibrate: [100, 50, 100],
    data: {
      url: payload.data?.url || '/',
      ...payload.data
    }
  };
  
  self.registration.showNotification(notificationTitle, notificationOptions);
});

// Handle regular push notifications (Web Push API)
self.addEventListener('push', (event) => {
  if (event.data) {
    try {
      const data = event.data.json();
      const options = {
        body: data.body || 'New notification from Fund Flow',
        icon: data.icon || '/pwa-512x512.png',
        badge: '/logo.png',
        vibrate: [100, 50, 100],
        data: {
          url: data.url || '/',
          ...data
        }
      };

      event.waitUntil(
        self.registration.showNotification(data.title || 'Fund Flow Notification', options)
      );
    } catch (error) {
      console.error('Error processing push notification:', error);
      // Fallback for text messages
      const options = {
        body: event.data.text() || 'New notification from Fund Flow',
        icon: '/pwa-512x512.png',
        badge: '/logo.png'
      };
      
      event.waitUntil(
        self.registration.showNotification('Fund Flow Notification', options)
      );
    }
  }
});

// Handle notification click
self.addEventListener('notificationclick', (event) => {
  event.notification.close();
  
  // Get the notification data
  const data = event.notification.data || {};
  const url = data.url || '/';
  
  // Add fund and transaction IDs to URL if available
  const fundId = data.fundId || '';
  const transactionId = data.transactionId || '';
  
  let targetUrl = url;
  if (fundId && !url.includes(fundId)) {
    targetUrl = `/funds/${fundId}`;
    if (transactionId) {
      targetUrl += `?transaction=${transactionId}`;
    }
  }
  
  event.waitUntil(
    clients.matchAll({ type: 'window' }).then((clientList) => {
      // If a window is already open, focus it
      for (const client of clientList) {
        if (client.url.includes(targetUrl) && 'focus' in client) {
          return client.focus();
        }
      }
      
      // Otherwise open a new window
      if (clients.openWindow) {
        return clients.openWindow(targetUrl);
      }
    })
  );
});

// Skip waiting to ensure the latest service worker is activated
self.addEventListener('install', (event) => {
  self.skipWaiting();
});

// Claim clients to ensure the service worker controls all clients
self.addEventListener('activate', (event) => {
  event.waitUntil(clients.claim());
});
